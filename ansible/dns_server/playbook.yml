---
- name: Setup DNS Server
  hosts: all
  vars:
    dnsmasq_config: /etc/dnsmasq.d/10-int.darkarctic.com.conf

  tasks:
  - name: CoreDNS user
    ansible.builtin.user:
      name: coredns
      create_home: false
      password: '!'
    become: true
  
  - name: Extract CoreDNS
    ansible.builtin.unarchive:
      src: https://github.com/coredns/coredns/releases/download/v1.11.1/coredns_1.11.1_linux_arm64.tgz
      dest: /usr/bin/
      mode: '0755'
      owner: root
      group: root
    become: true
  
  - name: CoreDNS configuration directory exists
    ansible.builtin.file:
      path: /etc/coredns
      state: directory
      mode: '0755'
    become: true

  - name: CoreDNS configuration
    ansible.builtin.blockinfile:
      path: /etc/coredns/Corefile
      block: |
        . {
          fowrard . /etc/resolv.conf
          reload
          kubernetes {
            kubeconfig /etc/rancher/k3s/k3s.yaml
          }
          log
        }
      mode: '0644'
      owner: root
      group: root
      create: true
    become: true

  - name: CoreDNS working directory
    ansible.builtin.file:
      path: /var/lib/coredns
      state: directory
      owner: coredns
      mode: 755
    become: true

  - name: CoreDNS systemd unit
    ansible.builtin.blockinfile:
      path: /lib/systemd/system/coredns.service
      block: |
        [Unit]
        Description=CoreDNS DNS server
        Documentation=https://coredns.io
        After=network.target

        [Service]
        PermissionsStartOnly=true
        LimitNOFILE=1048576
        LimitNPROC=512
        CapabilityBoundingSet=CAP_NET_BIND_SERVICE
        AmbientCapabilities=CAP_NET_BIND_SERVICE
        NoNewPrivileges=true
        User=coredns
        WorkingDirectory=/var/lib/coredns
        ExecStart=/usr/bin/coredns -conf=/etc/coredns/Corefile
        ExecReload=/bin/kill -SIGUSR1 $MAINPID
        Restart=on-failure
        StandardOutput=append:/var/log/coredns.log
        StandardError=append:/var/log/coredns.err.log

        [Install]
        WantedBy=multi-user.target
    become: true

  - name: Enable dnsmasq
    ansible.builtin.systemd_service:
      name: dnsmasq
      enabled: yes
      state: stopped
    become: true

  # - name: Install dnsmasq
  #   apt:
  #     name: dnsmasq
  #     update_cache: yes
  #   become: true

  # - name: Touch dnsmasq config
  #   file:
  #     path: "{{ dnsmasq_config }}"
  #     state: touch
  #     access_time: preserve
  #     modification_time: preserve
  #     mode: u=rw,g=r,o=r
  #     owner: root
  #   become: true

  # - name: Write dnsmasq config
  #   blockinfile:
  #     path: "{{ dnsmasq_config }}"
  #     block: |
  #       domain-needed
  #       no-dhcp-interface=eth0
  #       expand-hosts
  #       domain=int.darkarctic.com
  #   become: true

  # - name: Write hosts - picluster0
  #   lineinfile:
  #     path: /etc/hosts
  #     state: present
  #     regexp: '^192\.168\.86\.100 '
  #     line: 192.168.86.100 picluster0 picluster0.int.darkarctic.com
  #   become: true

  # - name: Write hosts - picluster1
  #   lineinfile:
  #     path: /etc/hosts
  #     state: present
  #     regexp: '^192\.168\.86\.101 '
  #     line: 192.168.86.101 picluster1 picluster1.int.darkarctic.com
  #   become: true

  # - name: Write hosts - registry.int.darkarctic.com
  #   lineinfile:
  #     path: /etc/hosts
  #     state: present
  #     regexp: '^192\.168\.10\.10 '
  #     line: 192.168.10.100 registry.int.darkarctic.com
  #   become: true

  - name: Write nameservers
    blockinfile:
      path: /etc/resolv.conf
      block: |
        nameserver 8.8.8.8
        nameserver 8.8.4.4
    become: true

  - name: Disable resolved
    systemd:
      name: systemd-resolved
      enabled: no
      state: stopped

  - name: Enable dnsmasq
    systemd:
      name: dnsmasq
      enabled: yes
      state: stopped
